{
  "name": "holderjs",
  "version": "1.9.0",
  "main": "holder.js",
  "dependencies": {},
  "gitHead": "8941f0c45736f298b788e604ef76cc6004d83508",
  "readme": "Holder\r\n======\r\n\r\nHolder uses the `canvas` element and the data URI scheme to render image placeholders entirely in browser.\r\n\r\n[Bootstrap](http://twitter.github.com/bootstrap/) uses Holder for thumbnails.\r\n\r\nHow to use it\r\n-------------\r\n\r\nInclude ``holder.js`` in your HTML:\r\n\r\n```html\r\n<script src=\"holder.js\"></script>\r\n```\r\n\r\nHolder will then process all images with a specific ``src`` attribute, like this one:\r\n\r\n```html\r\n<img src=\"holder.js/200x300\">\r\n```\r\n\r\nThe above tag will render as a placeholder 200 pixels wide and 300 pixels tall.\r\n\r\nTo avoid console 404 errors, you can use ``data-src`` instead of ``src``.\r\n\r\nHolder also includes support for themes, to help placeholders blend in with your layout. There are 3 default themes: ``gray``, ``industrial``, and ``social``. You can use them like this:\r\n\r\n```html\r\n<img src=\"holder.js/200x300/industrial\">\r\n```\r\n\r\nCustomizing themes\r\n------------------\r\n\r\nThemes have 4 properties: ``foreground``, ``background``, ``size``, and ``font``. The ``size`` property specifies the minimum font size for the theme. You can create a sample theme like this:\r\n\r\n```js\r\nHolder.add_theme(\"dark\", {background:\"#000\", foreground:\"#aaa\", size:11, font: \"Monaco\"})\r\n```\r\n\r\nUsing custom themes\r\n-------------------\r\n\r\nThere are two ways to use custom themes with Holder:\r\n\r\n* Include theme at runtime to render placeholders already using the theme name\r\n* Include theme at any point and re-render placeholders that are using the theme name\r\n\r\nThe first approach is the easiest. After you include ``holder.js``, add a ``script`` tag that adds the theme you want:\r\n\r\n```html\r\n<script src=\"holder.js\"></script>\r\n<script> Holder.add_theme(\"bright\", { background: \"white\", foreground: \"gray\", size: 12 })</script>\r\n```\r\n\r\nThe second approach requires that you call ``run`` after you add the theme, like this:\r\n\r\n```js\r\nHolder.add_theme(\"bright\", { background: \"white\", foreground: \"gray\", size: 12}).run()\r\n```\r\n\r\nUsing custom themes and domain on specific images\r\n-------------------------------------------------\r\n\r\nYou can use Holder in different areas on different images with custom themes:\r\n\r\n```html\r\n<img data-src=\"example.com/100x100/simple\" id=\"new\">\r\n```\r\n\r\n```js\r\nHolder.run({\r\n    domain: \"example.com\",\r\n    themes: {\r\n        \"simple\":{\r\n            background:\"#fff\",\r\n            foreground:\"#000\",\r\n            size:12\r\n            }\r\n    },\r\n    images: \"#new\"\r\n    })\r\n```\r\n\r\nUsing custom colors on specific images\r\n--------------------------------------\r\n\r\nCustom colors on a specific image can be specified in the ``background:foreground`` format using hex notation, like this:\r\n\r\n```html\r\n<img data-src=\"holder.js/100x200/#000:#fff\">\r\n```\r\n\r\nThe above will render a placeholder with a black background and white text.\r\n\r\nCustom text\r\n-----------\r\n\r\nYou can specify custom text using the ``text:`` operator:\r\n\r\n```html\r\n<img data-src=\"holder.js/200x200/text:hello world\">\r\n```\r\n\r\nIf you have a group of placeholders where you'd like to use particular text, you can do so by adding a ``text`` property to the theme:\r\n\r\n```js\r\nHolder.add_theme(\"thumbnail\", { background: \"#fff\", text: \"Thumbnail\" })\r\n```\r\n\r\nFluid placeholders\r\n------------------\r\n\r\nSpecifying a dimension in percentages creates a fluid placeholder that responds to media queries.\r\n\r\n```html\r\n<img data-src=\"holder.js/100%x75/social\">\r\n```\r\n\r\nBy default, the fluid placeholder will show its current size in pixels.\r\n\r\nAutomatically sized placeholders\r\n--------------------------------\r\n\r\nIf you'd like to avoid Holder enforcing an image size, use the ``auto`` flag like so:\r\n\r\n```html\r\n<img data-src=\"holder.js/200x200/auto\">\r\n```\r\n\r\nThe above will render a placeholder without any embedded CSS for height or width.\r\n\r\nBackground placeholders\r\n-----------------------\r\n\r\nHolder can render placeholders as background images for elements with the `holderjs` class, like this:\r\n\r\n```css\r\n#sample {background:url(?holder.js/200x200/social) no-repeat}\r\n```\r\n\r\n```html\r\n<div id=\"sample\" class=\"holderjs\"></div>\r\n```\r\n\r\nThe Holder URL in CSS should have a `?` in front. You can change the default class by specifying a selector as the `bgnodes` property when calling `Holder.run`.\r\n\r\nCustomizing only the settings you need\r\n--------------------------------------\r\n\r\nHolder extends its default settings with the settings you provide, so you only have to include those settings you want changed. For example, you can run Holder on a specific domain like this:\r\n\r\n```js\r\nHolder.run({domain:\"example.com\"})\r\n```\r\n\r\nUsing custom settings on load\r\n-----------------------------\r\n\r\nYou can prevent Holder from running its default configuration by executing ``Holder.run`` with your custom settings right after including ``holder.js``. However, you'll have to execute ``Holder.run`` again to render any placeholders that use the default configuration.\r\n\r\nInserting an image with optional custom theme\r\n---------------------------------------------\r\n\r\nYou can add a placeholder programmatically by chaining Holder calls:\r\n\r\n```js\r\nHolder.add_theme(\"new\",{foreground:\"#ccc\", background:\"#000\", size:10}).add_image(\"holder.js/200x100/new\", \"body\").run()\r\n```\r\n\r\nThe first argument in ``add_image`` is the ``src`` attribute, and the second is a CSS selector of the parent element.\r\n\r\nUsing with ``lazyload.js``\r\n--------------------------\r\n\r\nHolder is compatible with ``lazyload.js`` and works with both fluid and fixed-width images. For best results, run `.lazyload({skip_invisible:false})`.\r\n\r\nBrowser support\r\n---------------\r\n\r\n* Chrome 1+\r\n* Firefox 3+\r\n* Safari 4+\r\n* Internet Explorer 9+, with fallback for IE6-8\r\n* Android 1+\r\n\r\nLicense\r\n-------\r\n\r\nHolder is provided under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0). Commercial use requires attribution.\r\n\r\nCredits\r\n-------\r\n\r\nHolder is a project by [Ivan Malopinsky](http://imsky.co).\r\n",
  "readmeFilename": "README.md",
  "_id": "holderjs@1.9.0",
  "description": "Holder\r ======",
  "repository": {
    "type": "git",
    "url": "git://github.com/imsky/holder.git"
  }
}